
// Приоритетные коллекции. PriorityQueue/LinkedList. Хранение и обработка
// данных,
// чаcть I
/**
 * Java collections framework (JCF) — это набор связанных классов и интерфейсов,
 * реализующих широко используемые структуры данных — коллекции.
 * 
 * Класс LinkedList — еще одна реализация интерфейса List . Представляет из себя
 * двусвязный список, где каждый элемент структуры содержит ссылки на предыдущий
 * и следующий элементы. По этим ссылкам можно переходить от одного элемента к
 * другому.
 * Чем отличается LinkedList и list?
 * Эта структура состоит из набора узлов, каждый из которых содержит ссылку на
 * следующий и следующий узел в списке, и может содержать значение. Основное
 * преимущество LinkedList заключается в том, что вставка или удаление элемента
 * в середине списка выполняется быстрее, чем в массиве.
 * 
 * Queue (перевод очередь)- коллекция, предназначенная для хранения элементов в
 * порядке, нужном для их обработки. В дополнение к базовым операциям интерфейса
 * Collection, очередь предоставляет дополнительные операции вставки, получения
 * и контроля.
 * 
 * Deque — это интерфейс, который добавили в 6 версии Java. Он включает в себя
 * ряд полезных для очередей методов и дает возможность очереди функционировать
 * как двунаправленная очередь. То есть работать по принципу FIFO или LIFO.
 * Одним из двух наследников Deque является ArrayDeque.
 * 
 * Stack — это линейная структура данных, которая следует принципу LIFO
 * (последний пришел, первый ушел). Это означает, что объекты могут быть
 * вставлены или удалены только с одного конца, также называемого вершиной.
 * 
 * У меня есть план:
 * 1. Разобраться, зачем нужно столько коллекций и JCF
 * 2. LinkedList и особенности работы с ним
 * 3. Узнать о списках, как об абстрактной структуре
 * 4. Проблемы работы со списками и массивами
 * 5. Построение разных Queue и как в этом помогает JCF
 * 6. Deque и логика использования этой коллекции
 * 7. То, что мертво, умереть не может – Stack в контексте JCF
 * 
 * 1. Зачем разные коллекции? ///
 * 
 * а). Способ обработки данных
 * б). Решаемые задачи
 * 
 * 2. LinkedList: (п. 3 и 4)
 * 
 * Представляет собой двусвязный список.
 * Список – гибкая структура данных, позволяющая легко менять свой
 * размер. Элементы доступны для вставки или удаления в любой позиции.
 * [] => [] => [] => [] =>
 * 
 * В массиве. Чем такой способ организации лучше? Или хуже?
 * - Добавление в конец списка. (в другое не получиться)
 * 
 * В LinkedList. Чем такой способ организации лучше? Или хуже?
 * - Добавление в середину списка.
 * - Удаление из списка списка.
 * - Односвязный список.
 * - Двусвязный список.
 * Что нам с этого?
 * Количество операций меньше => скорость доступа к данным выше.
 * 
 * Мотивация:
 * LinkedList нужен для небольшого количества элементов, в которых операции
 * добавления\удаления встречаются чаще операций чтения.
 * 
 * Потренируйтесь с операциями добавления\удаление
 * в двусвязном и циклическом списках.
 * 
 * 5. Queue (очередь) колекция:
 * Очередь в магазине.
 * 
 * 
 * // import java.util.*;
 * // public class Ex002_Queue {
 * // public static void main(String[] args) {
 * // Queue<Integer> queue = new LinkedList<Integer>();
 * // queue.add(1);
 * // queue.add(2);
 * // queue.add(3);
 * // queue.add(4);
 * // System.out.println(queue); // [1, 2, 3, 4]
 * // int item = queue.remove();
 * // System.out.println(queue); // [2, 3, 4]
 * // queue.offer(2809);
 * // item = queue.remove();
 * // System.out.println(queue); // [3, 4, 2809]
 * // item = queue.remove();
 * // System.out.println(queue); // [4, 2809]
 * // item = queue.poll();
 * // System.out.println(queue); // [2809]
 * // }
 * // }
 * 
 * // import java.util.*;
 * // public class Ex002_Queue {
 * // public static void main(String[] args) {
 * // Queue<Integer> queue = new LinkedList<Integer>();
 * // queue.add(1);
 * // int item = queue.remove();
 * // queue.offer(2809);
 * // item = queue.poll();
 * // System.out.println(queue);
 * // }
 * // }
 * 
 * // import java.util.*;
 * // public class Ex002_Queue {
 * // public static void main(String[] args) {
 * // Queue<Integer> queue = new LinkedList<Integer>();
 * // queue.add(1);
 * // int item = queue.remove();
 * // queue.offer(2809);
 * // item = queue.poll();
 * // System.out.println(queue);
 * // queue.element();
 * // queue.peek();
 * // }
 * // }
 * 
 * // import java.util.*;
 * // public class Ex002_Queue {
 * // public static void main(String[] args) {
 * // Queue<Integer> queue = new LinkedList<Integer>();
 * // queue.add(1);
 * // int item = queue.remove();
 * // queue.offer(2809);
 * // item = queue.poll();
 * // System.out.println(queue);
 * // queue.remove(2809); // зачем очередь??
 * // queue.element();
 * // queue.peek();
 * // }
 * // }
 * 
 * // Иерархия коллекций
 * 
 * 
 */
